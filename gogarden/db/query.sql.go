// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: query.sql

package db

import (
	"context"

	"go.universe.tf/garden/gogarden/types"
)

const getLocations = `-- name: GetLocations :many
select id, name, qr_state from locations
`

func (q *Queries) GetLocations(ctx context.Context) ([]*Location, error) {
	rows, err := q.db.QueryContext(ctx, getLocations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Location
	for rows.Next() {
		var i Location
		if err := rows.Scan(&i.ID, &i.Name, &i.QRState); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateLocation = `-- name: UpdateLocation :exec
update locations set name=?,qr_state=? where id=?
`

type UpdateLocationParams struct {
	Name    string        `json:"name"`
	QRState types.QRState `json:"qr_state"`
	ID      int64         `json:"id"`
}

func (q *Queries) UpdateLocation(ctx context.Context, arg UpdateLocationParams) error {
	_, err := q.db.ExecContext(ctx, updateLocation, arg.Name, arg.QRState, arg.ID)
	return err
}
