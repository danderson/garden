package views

import (
	"fmt"

	"go.universe.tf/garden/gogarden/db"
	"go.universe.tf/garden/gogarden/forms"
	"go.universe.tf/garden/gogarden/types/tribool"
	"go.universe.tf/garden/gogarden/types/plantfamily"
)

templ Seeds(seeds []db.Seed) {
	<div class="sticky bg-slate-700 text-slate-200 top-0 text-xl px-2 py-2 flex">
		<div class="flex-grow"></div>
		<button class="py-1 px-2 rounded-lg border-2" hx-get="/seeds/new" hx-push-url="true" hx-target="body">Add</button>
	</div>
	<div id="seeds" class="flex flex-col">
		for _, seed := range seeds {
			<div hx-get={ f("/seeds/%d", seed.ID) }
				 hx-target="body"
				 hx-push-url="true"
				 class="px-2 py-3 font-semibold">
				{ seed.Name }
			</div>
		}
	</div>
}

templ goodBadge(label string) {
	<span class="rounded-xl border-1 bg-green-200 text-green-900 px-2">{ label }</span>
}

templ infoBadge(label string) {
	<span class="rounded-xl border-1 bg-blue-200 text-blue-900 px-2">{ label }</span>
}

templ badBadge(label string) {
	<span class="rounded-xl border-1 bg-red-200 text-red-900 px-2">{ label }</span>
}

templ Seed(seed db.Seed) {
	<div class="sticky bg-slate-700 text-slate-200 top-0 text-xl px-2 py-2 flex gap-2">
		<button class="py-1 px-2 font-semibold" hx-get="/seeds" hx-target="body" hx-push-url="true">X</button>
		<div class="flex-grow"></div>
		<button class="py-1 px-2 rounded-lg border-2" hx-get={ f("/seeds/%d/edit", seed.ID) } hx-target="body" hx-push-url="true">Edit</button>
		<button class="py-1 px-2 rounded-lg border-2">Plant</button>
	</div>
	<div id="seed" class="px-2 py-3">
		<h1 class="text-lg font-semibold">{ seed.Name }</h1>
		<p class="text-sm">
			if seed.Family != plantfamily.Unknown {
				{ s(seed.Family) }
			}
			if seed.Year != nil && seed.Family != plantfamily.Unknown {
				{ ", " }
			}
			if seed.Year != nil {
				{ atoi(*seed.Year) }
			}
		</p>
		<div class="pt-1 flex flex-wrap gap-1">
			if seed.Edible == tribool.True {
				@goodBadge("edible")
			}
			if seed.NeedsTrellis == tribool.True {
				@infoBadge("trellis")
			}
			if seed.NeedsBirdNetting == tribool.True {
				@infoBadge("bird net")
			}
			if seed.IsKeto == tribool.True {
				@goodBadge("keto")
			}
			if seed.IsNative == tribool.True {
				@goodBadge("native")
			}
			if seed.IsInvasive == tribool.True {
				@badBadge("invasive")
			}
			if seed.IsCoverCrop == tribool.True {
				@infoBadge("cover crop")
			}
			if seed.GrowsWellFromSeed == tribool.True {
				@infoBadge("good from seed")
			}
			if seed.IsBadForCats == tribool.True {
				@badBadge("not cat safe")
			} else if seed.IsBadForCats == tribool.False {
				@goodBadge("cat safe")
			}
			if seed.IsDeerResistant == tribool.True {
				@infoBadge("deer resistant")
			}
		</div>
	</div>
}

templ textInput(field forms.Field, label string) {
	<label for={field.ID}>{def(label, field.ID)}</label>
	for _, err := range field.Errors {
		<p class="text-red-400">{err}</p>
	}
	<input class="text-slate-900" name={field.ID} value={s(field.Value)} />
}

templ selectInput(field forms.Field, label string) {
	<label for={field.ID}>{def(label, field.ID)}</label>
	for _, err := range field.Errors {
		<p class="text-red-400">{err}</p>
	}
	<select class="text-slate-900" name={field.ID} value={s(field.Value)}>
		for _, opt := range field.Options {
			<option value={opt} selected?={s(field.Value) == opt}>{opt}</option>
		}
	</select>
}

templ seedForm(form *forms.Form, cancelURL string) {
	<form>
		<div class="sticky bg-slate-700 text-slate-200 top-0 text-xl px-2 py-2 flex gap-2">
			<div class="flex-grow"></div>
			<button class="py-1 px-2 rounded-lg border-2" hx-get={cancelURL} hx-target="body" hx-push-url="true">Cancel</button>
			<button class="py-1 px-2 rounded-lg border-2" hx-post hx-target="body">Save</button>
		</div>
		@textInput(form.Fields["Name"], "")
		@selectInput(form.Fields["Family"], "")
		@selectInput(form.Fields["Edible"], "Edible?")
		@selectInput(form.Fields["NeedsTrellis"], "Needs trellis?")
		@selectInput(form.Fields["NeedsBirdNetting"], "Needs bird netting?")
		@selectInput(form.Fields["IsKeto"], "Keto?")
		@selectInput(form.Fields["IsNative"], "Native?")
		@selectInput(form.Fields["IsInvasive"], "Invasive?")
		@selectInput(form.Fields["IsCoverCrop"], "Cover crop?")
		@selectInput(form.Fields["GrowsWellFromSeed"], "Grows well from seed?")
		@selectInput(form.Fields["IsBadForCats"], "Bad for cats?")
		@selectInput(form.Fields["IsDeerResistant"], "Deer resistant?")
	</form>
}

templ NewSeed(form *forms.Form) {
	@seedForm(form, "/seeds")
}

templ EditSeed(id int64, form *forms.Form) {
	@seedForm(form, fmt.Sprintf("/seeds/%d", id))
}
