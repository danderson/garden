package views

import (
	"sync"
	"crypto/rand"
	"encoding/hex"
	"fmt"
	"strconv"

	"go.universe.tf/garden/gogarden/db"
	"go.universe.tf/garden/gogarden/forms"
	"go.universe.tf/garden/gogarden/types"
	"go.universe.tf/garden/gogarden/types/tribool"
)

var (
	staticSlug string
	staticOnce sync.Once
)

var s = fmt.Sprint
var f = fmt.Sprintf

type signed interface {
	~int | ~int8 | ~int16 | ~int32 | ~int64
}

func atoi[T signed](i T) string {
	return strconv.FormatInt(int64(i), 10)
}

func static(filename string) string {
	staticOnce.Do(func() {
		var slug [8]byte
		if _, err := io.ReadFull(rand.Reader, slug[:]); err != nil {
			panic("no random bytes available")
		}
		staticSlug = hex.EncodeToString(slug[:])
	})

	return fmt.Sprintf("/static/%s/%s", staticSlug, filename)
}

func i64True(b *int64) bool {
	return b != nil && *b > 0
}

func i64False(b *int64) bool {
	return b != nil && *b == 0
}

func def(s, def string) string {
	if s != "" {
		return s
	}
	return def
}

templ Root(contents templ.Component) {
	<!DOCTYPE html>
	<html lang="en" class="[scrollbar-gutter:stable]">
		<head>
			<meta charset="utf-8"/>
			<meta name="viewport" content="width=device-width, initial-scale=1"/>
			<link rel="stylesheet" href={ static("app.css") }/>
			<script type="text/javascript" src="/.live"></script>
			<script defer type="text/javascript" src={ static("htmx.min.js") }></script>
			<!-- <script defer type="text/javascript" src="/assets/app.js"></script> -->
		</head>
		<body id="body" class="bg-slate-900 text-slate-100">
			@contents
		</body>
	</html>
}

templ Seeds(seeds []db.Seed) {
	<div class="sticky bg-slate-700 text-slate-200 top-0 text-xl px-2 py-2 flex">
		<div class="flex-grow"></div>
		<button class="py-1 px-2 rounded-lg border-2" hx-get="/seeds/new" hx-push-url="true" hx-target="#body">Add</button>
	</div>
	<div id="seeds" class="flex flex-col">
		for _, seed := range seeds {
			<div hx-get={ f("/seeds/%d", seed.ID) }
				 hx-target="#body"
				 hx-push-url="true"
				 class="px-2 py-3 font-semibold">
				{ seed.Name }
			</div>
		}
	</div>
}

templ goodBadge(label string) {
	<span class="rounded-xl border-1 bg-green-200 text-green-900 px-2">{ label }</span>
}

templ infoBadge(label string) {
	<span class="rounded-xl border-1 bg-blue-200 text-blue-900 px-2">{ label }</span>
}

templ badBadge(label string) {
	<span class="rounded-xl border-1 bg-red-200 text-red-900 px-2">{ label }</span>
}

templ Seed(seed db.Seed) {
	<div class="sticky bg-slate-700 text-slate-200 top-0 text-xl px-2 py-2 flex gap-2">
		<div class="flex-grow"></div>
		<button class="py-1 px-2 rounded-lg border-2">Edit</button>
		<button class="py-1 px-2 rounded-lg border-2">Plant</button>
	</div>
	<div id="seed" class="px-2 py-3">
		<h1 class="text-lg font-semibold">{ seed.Name }</h1>
		<p class="text-sm">
			if seed.Family != nil {
				{ *seed.Family }
			}
			if seed.Year != nil && seed.Family != nil {
				{ ", " }
			}
			if seed.Year != nil {
				{ atoi(*seed.Year) }
			}
		</p>
		<div class="pt-1 flex flex-wrap gap-1">
			if seed.Edible == tribool.True {
				@goodBadge("edible")
			}
			if seed.NeedsTrellis == tribool.True {
				@infoBadge("trellis")
			}
			if seed.NeedsBirdNetting == tribool.True {
				@infoBadge("bird net")
			}
			if seed.IsKeto == tribool.True {
				@goodBadge("keto")
			}
			if seed.IsNative == tribool.True {
				@goodBadge("native")
			}
			if seed.IsInvasive == tribool.True {
				@badBadge("invasive")
			}
			if seed.IsCoverCrop == tribool.True {
				@infoBadge("cover crop")
			}
			if seed.GrowsWellFromSeed == tribool.True {
				@infoBadge("good from seed")
			}
			if seed.IsBadForCats == tribool.True {
				@badBadge("not cat safe")
			} else if seed.IsBadForCats == tribool.False {
				@goodBadge("cat safe")
			}
			if seed.IsDeerResistant == tribool.True {
				@infoBadge("deer resistant")
			}
		</div>
	</div>
}

templ textInput(field forms.Field, label string) {
	<label for={field.ID}>{def(label, field.ID)}</label>
	for _, err := range field.Errors {
		<p class="text-red-400">{err}</p>
	}
	<input class="text-slate-900" name={field.ID} value={s(field.Value)} />
}

templ selectInput(field forms.Field, label string, options []string) {
	<label for={field.ID}>{def(label, field.ID)}</label>
	for _, err := range field.Errors {
		<p class="text-red-400">{err}</p>
	}
	<select class="text-slate-900" name={field.ID} value={s(field.Value)}>
		for _, opt := range options {
			<option value={opt}>{opt}</option>
		}
	</select>
}

templ triboolInput(field forms.Field, label string) {
	<label for={field.ID}>{def(label, field.ID)}</label>
	for _, err := range field.Errors {
		<p class="text-red-400">{err}</p>
	}
	<select class="text-slate-900" name={field.ID} value={s(field.Value)}>
		<option value="Unknown">Unknown</option>
		<option value="True">Yes</option>
		<option value="False">No</option>
	</select>
}

templ NewSeed(form *forms.Form[db.CreateSeedParams]) {
	<div class="sticky bg-slate-700 text-slate-200 top-0 text-xl px-2 py-2 flex gap-2">
		<div class="flex-grow"></div>
		<button class="py-1 px-2 rounded-lg border-2" hx-get="/seeds" hx-target="#body">Cancel</button>
		<button class="py-1 px-2 rounded-lg border-2">Save</button>
	</div>
	<form hx-post="/seeds/new">
		@textInput(form.Fields["Name"], "")
		@selectInput(form.Fields["Family"], "", types.PlantFamilyStrings())
		@triboolInput(form.Fields["Edible"], "Edible?")
		@triboolInput(form.Fields["NeedsTrellis"], "Needs trellis?")
		@triboolInput(form.Fields["NeedsBirdNetting"], "Needs bird netting?")
		@triboolInput(form.Fields["IsKeto"], "Keto?")
		@triboolInput(form.Fields["IsNative"], "Native?")
		@triboolInput(form.Fields["IsInvasive"], "Invasive?")
		@triboolInput(form.Fields["IsCoverCrop"], "Cover crop?")
		@triboolInput(form.Fields["GrowsWellFromSeed"], "Grows well from seed?")
		@triboolInput(form.Fields["IsBadForCats"], "Bad for cats?")
		@triboolInput(form.Fields["IsDeerResistant"], "Deer resistant?")
	</form>
}
