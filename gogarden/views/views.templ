package views

import (
	"sync"
	"crypto/rand"
	"encoding/hex"
	"fmt"
	"go.universe.tf/garden/gogarden/db"
	"strconv"
)

var (
	staticSlug string
	staticOnce sync.Once
)

var (
	f = fmt.Sprintf
)

type signed interface {
	~int | ~int8 | ~int16 | ~int32 | ~int64
}

func atoi[T signed](i T) string {
	return strconv.FormatInt(int64(i), 10)
}

func static(filename string) string {
	staticOnce.Do(func() {
		var slug [8]byte
		if _, err := io.ReadFull(rand.Reader, slug[:]); err != nil {
			panic("no random bytes available")
		}
		staticSlug = hex.EncodeToString(slug[:])
	})

	return fmt.Sprintf("/static/%s/%s", staticSlug, filename)
}

templ Root(contents templ.Component) {
	<!DOCTYPE html>
	<html lang="en" class="[scrollbar-gutter:stable]">
		<head>
			<meta charset="utf-8"/>
			<meta name="viewport" content="width=device-width, initial-scale=1"/>
			<link rel="stylesheet" href={ static("app.css") }/>
			<script type="text/javascript" src="/.live"></script>
			<script defer type="text/javascript" src={ static("htmx.min.js") }></script>
			<!-- <script defer type="text/javascript" src="/assets/app.js"></script> -->
		</head>
		<body id="body" class="bg-slate-900 text-slate-100">
			@contents
		</body>
	</html>
}

templ Seeds(seeds []db.Seed) {
	<div class="sticky bg-slate-700 text-slate-200 top-0 text-xl px-2 py-2 flex">
		<div class="flex-grow"></div>
		<button class="py-1 px-2 rounded-lg border-2">Add</button>
	</div>
	<div id="seeds" class="flex flex-col">
		for _, seed := range seeds {
			<div hx-get={ fmt.Sprintf("/seeds/%d", seed.ID) }
				 hx-target="#body"
				 hx-push-url="true"
				 class="px-2 py-3 font-semibold">
				{ seed.Name }
			</div>
		}
	</div>
}

templ goodBadge(label string) {
	<span class="rounded-xl border-1 bg-green-200 text-green-900 px-2">{ label }</span>
}

templ infoBadge(label string) {
	<span class="rounded-xl border-1 bg-blue-200 text-blue-900 px-2">{ label }</span>
}

templ badBadge(label string) {
	<span class="rounded-xl border-1 bg-red-200 text-red-900 px-2">{ label }</span>
}

templ Seed(seed db.Seed) {
	<div class="sticky bg-slate-700 text-slate-200 top-0 text-xl px-2 py-2 flex gap-2">
		<div class="flex-grow"></div>
		<button class="py-1 px-2 rounded-lg border-2">Edit</button>
		<button class="py-1 px-2 rounded-lg border-2">Plant</button>
	</div>
	<div id="seed" class="px-2 py-3">
		<h1 class="text-lg font-semibold">{ seed.Name }</h1>
		<p class="text-sm">
			if seed.Family.Valid {
				{ seed.Family.String }
			}
			if seed.Year.Valid && seed.Family.Valid {
				{ ", " }
			}
			if seed.Year.Valid {
				{ atoi(seed.Year.Int64) }
			}
		</p>
		<div class="pt-1 flex flex-wrap gap-1">
		if seed.Edible.Int64 > 0 {
			@goodBadge("edible")
		}
		if seed.NeedsTrellis.Int64 > 0 {
			@infoBadge("trellis")
		}
		if seed.NeedsBirdNetting.Int64 > 0 {
			@infoBadge("bird net")
		}
		if seed.IsKeto.Int64 > 0 {
			@goodBadge("keto")
		}
		if seed.IsNative.Int64 > 0 {
			@goodBadge("native")
		}
		if seed.IsInvasive.Int64 > 0 {
			@badBadge("invasive")
		}
		if seed.IsCoverCrop.Int64 > 0 {
			@infoBadge("cover crop")
		}
		if seed.GrowsWellFromSeed.Int64 > 0 {
			@infoBadge("good from seed")
		}
		if seed.IsBadForCats.Int64 > 0 {
			@badBadge("not cat safe")
		} else if seed.IsBadForCats.Valid {
			@goodBadge("cat safe")
		}
		if seed.IsDeerResistant.Int64 > 0 {
			@infoBadge("deer resistant")
		}
		</div>
	</div>
}
