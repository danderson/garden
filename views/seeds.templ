package views

import (
	"fmt"

	"go.universe.tf/garden/db"
	"go.universe.tf/garden/forms"
	"go.universe.tf/garden/types/tribool"
	"go.universe.tf/garden/types/suntype"
	"go.universe.tf/garden/types/soiltype"
	"go.universe.tf/garden/types/plantfamily"
)

templ SeedList(seeds []db.Seed) {
	for _, seed := range seeds {
		<div hx-get={ f("/seeds/%d", seed.ID) }
			 hx-target="body"
			 hx-push-url="true"
			 class="px-2 py-3 font-semibold">
			{ seed.Name }
		</div>
	}
}

templ Seeds(seeds []db.Seed) {
	<div class="sticky bg-slate-700 text-slate-200 top-0 text-xl px-2 py-2 flex gap-2">
		<input size="1" class="flex-grow px-2 text-slate-900 bg-slate-100 rounded-md" type="search" name="q" hx-get="/seeds/search" hx-trigger="input changed delay:200ms, search" hx-target="#seeds" />
		<button class="py-1 px-2 rounded-lg border-2" hx-get="/seeds/new" hx-push-url="true" hx-target="body">Add</button>
	</div>
	<div id="seeds" class="flex flex-col">
		@SeedList(seeds)
	</div>
}

type badgeKind int

const (
	badgeGood badgeKind = iota
	badgeBad
	badgeInfo
)

type badgeThumb int

const (
	thumbNone badgeThumb = iota
	thumbUp
	thumbDown
)

func badgeClass(kind badgeKind) string {
	switch kind {
	case badgeGood:
		return "rounded-xl border-1 bg-green-200 text-green-900 px-2"
	case badgeInfo:
		return "rounded-xl border-1 bg-blue-200 text-blue-900 px-2"
	case badgeBad:
		return "rounded-xl border-1 bg-red-200 text-red-900 px-2"
	}
	return ""
}

templ badge(kind badgeKind, thumb badgeThumb, label string) {
	<span class={badgeClass(kind)}>
		switch thumb {
		case thumbUp:
			<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="inline" width="1em">
				<path stroke-linecap="round" stroke-linejoin="round" d="M6.633 10.25c.806 0 1.533-.446 2.031-1.08a9.041 9.041 0 0 1 2.861-2.4c.723-.384 1.35-.956 1.653-1.715a4.498 4.498 0 0 0 .322-1.672V2.75a.75.75 0 0 1 .75-.75 2.25 2.25 0 0 1 2.25 2.25c0 1.152-.26 2.243-.723 3.218-.266.558.107 1.282.725 1.282m0 0h3.126c1.026 0 1.945.694 2.054 1.715.045.422.068.85.068 1.285a11.95 11.95 0 0 1-2.649 7.521c-.388.482-.987.729-1.605.729H13.48c-.483 0-.964-.078-1.423-.23l-3.114-1.04a4.501 4.501 0 0 0-1.423-.23H5.904m10.598-9.75H14.25M5.904 18.5c.083.205.173.405.27.602.197.4-.078.898-.523.898h-.908c-.889 0-1.713-.518-1.972-1.368a12 12 0 0 1-.521-3.507c0-1.553.295-3.036.831-4.398C3.387 9.953 4.167 9.5 5 9.5h1.053c.472 0 .745.556.5.96a8.958 8.958 0 0 0-1.302 4.665c0 1.194.232 2.333.654 3.375Z" />
			</svg>
		case thumbDown:
			<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="inline" width="1em">
				<path stroke-linecap="round" stroke-linejoin="round" d="M7.498 15.25H4.372c-1.026 0-1.945-.694-2.054-1.715a12.137 12.137 0 0 1-.068-1.285c0-2.848.992-5.464 2.649-7.521C5.287 4.247 5.886 4 6.504 4h4.016a4.5 4.5 0 0 1 1.423.23l3.114 1.04a4.5 4.5 0 0 0 1.423.23h1.294M7.498 15.25c.618 0 .991.724.725 1.282A7.471 7.471 0 0 0 7.5 19.75 2.25 2.25 0 0 0 9.75 22a.75.75 0 0 0 .75-.75v-.633c0-.573.11-1.14.322-1.672.304-.76.93-1.33 1.653-1.715a9.04 9.04 0 0 0 2.86-2.4c.498-.634 1.226-1.08 2.032-1.08h.384m-10.253 1.5H9.7m8.075-9.75c.01.05.027.1.05.148.593 1.2.925 2.55.925 3.977 0 1.487-.36 2.89-.999 4.125m.023-8.25c-.076-.365.183-.75.575-.75h.908c.889 0 1.713.518 1.972 1.368.339 1.11.521 2.287.521 3.507 0 1.553-.295 3.036-.831 4.398-.306.774-1.086 1.227-1.918 1.227h-1.053c-.472 0-.745-.556-.5-.96a8.95 8.95 0 0 0 .303-.54" />
			</svg>
		}
		{ label }
	</span>
}

templ Seed(seed db.Seed) {
	<div class="sticky bg-slate-700 text-slate-200 top-0 text-xl px-2 py-2 flex gap-2">
		<button class="py-1 px-2 font-semibold" hx-get="/seeds" hx-target="body" hx-push-url="true">X</button>
		<div class="flex-grow"></div>
		<button class="py-1 px-2 rounded-lg border-2" hx-get={ f("/seeds/%d/edit", seed.ID) } hx-target="body" hx-push-url="true">Edit</button>
		<button class="py-1 px-2 rounded-lg border-2" hx-get={ f("/plants/new?SeedID=%d", seed.ID) } hx-target="body" hx-push-url="true">Plant</button>
	</div>
	<div id="seed" class="px-2 py-3">
		<h1 class="text-lg font-semibold">{ seed.Name }</h1>
		<p class="text-sm">
			if seed.LatinName != "" {
				{ s(seed.LatinName) }
				if seed.Family != plantfamily.Unknown {
					({ s(seed.Family) })
				}
			} else if seed.Family != plantfamily.Unknown {
				{ s(seed.Family) }
			}
			if seed.Year != nil && (seed.Family != plantfamily.Unknown || seed.LatinName != "") {
				{ ", " }
			}
			if seed.Year != nil {
				{ atoi(*seed.Year) }
			}
		</p>
		<div class="pt-1 flex flex-wrap gap-1">
			if seed.IsKeto == tribool.True {
				@badge(badgeGood, thumbNone, "keto")
			} else if seed.Edible == tribool.True {
				@badge(badgeGood, thumbNone, "edible")
				if seed.IsKeto == tribool.False {
					@badge(badgeBad, thumbDown, "keto")
				}
			}
			if seed.IsNative == tribool.True {
				@badge(badgeGood, thumbNone, "native")
			}
			if seed.IsInvasive == tribool.True {
				@badge(badgeBad, thumbNone, "invasive")
			}
			if seed.IsCoverCrop == tribool.True {
				@badge(badgeInfo, thumbNone, "cover crop")
			}
			if seed.GrowsWellFromSeed == tribool.True {
				@badge(badgeGood, thumbUp, "seed")
			} else if seed.GrowsWellFromSeed == tribool.False {
				@badge(badgeBad, thumbDown, "seed")
			}
			if seed.IsBadForCats == tribool.True {
				@badge(badgeBad, thumbDown, "cats")
			} else if seed.IsBadForCats == tribool.False {
				@badge(badgeGood, thumbUp, "cats")
			}
			if seed.IsDeerResistant == tribool.True {
				@badge(badgeInfo, thumbUp, "deer")
			}
			if seed.NeedsTrellis == tribool.True {
				@badge(badgeInfo, thumbNone, "trellis")
			}
			if seed.NeedsBirdNetting == tribool.True {
				@badge(badgeInfo, thumbNone, "bird net")
			}
			if seed.NeedsStratification == tribool.True {
				@badge(badgeInfo, thumbNone, "stratify")
			}
			switch seed.SunType {
			case suntype.Full:
				@badge(badgeInfo, thumbNone, "full sun")
			case suntype.Partial:
				@badge(badgeInfo, thumbNone, "partial sun")
			case suntype.Shade:
				@badge(badgeInfo, thumbNone, "shade")
			}
			switch seed.SoilType {
			case soiltype.Dry:
				@badge(badgeInfo, thumbNone, "dry soil")
			case soiltype.Wet:
				@badge(badgeInfo, thumbNone, "wet soil")
			case soiltype.Both:
				@badge(badgeInfo, thumbNone, "dry or wet soil")
			}
		</div>
	</div>
}

templ seedForm(form *forms.Form, cancelURL string) {
	<form>
		<div class="sticky bg-slate-700 text-slate-200 top-0 text-xl px-2 py-2 flex gap-2">
			<div class="flex-grow"></div>
			<button class="py-1 px-2 rounded-lg border-2" hx-get={cancelURL} hx-target="body" hx-push-url="true">Cancel</button>
			<button class="py-1 px-2 rounded-lg border-2" hx-post hx-target="body">Save</button>
		</div>
		<div class="flex flex-col gap-2">
			@textInput(form.Fields["Name"], "")
			@textInput(form.Fields["LatinName"], "Latin name")
			@selectInput(form.Fields["Family"], "")
			@selectInput(form.Fields["SunType"], "Sun exposure")
			@selectInput(form.Fields["SoilType"], "Soil wetness")
			@selectInput(form.Fields["Edible"], "Edible?")
			@selectInput(form.Fields["NeedsTrellis"], "Needs trellis?")
			@selectInput(form.Fields["NeedsBirdNetting"], "Needs bird netting?")
			@selectInput(form.Fields["NeedsStratification"], "Needs stratification?")
			@selectInput(form.Fields["IsKeto"], "Keto?")
			@selectInput(form.Fields["IsNative"], "Native?")
			@selectInput(form.Fields["IsInvasive"], "Invasive?")
			@selectInput(form.Fields["IsCoverCrop"], "Cover crop?")
			@selectInput(form.Fields["GrowsWellFromSeed"], "Grows well from seed?")
			@selectInput(form.Fields["IsBadForCats"], "Bad for cats?")
			@selectInput(form.Fields["IsDeerResistant"], "Deer resistant?")
		</div>
	</form>
}

templ NewSeed(form *forms.Form) {
	@seedForm(form, "/seeds")
}

templ EditSeed(id int64, form *forms.Form) {
	@seedForm(form, fmt.Sprintf("/seeds/%d", id))
}
