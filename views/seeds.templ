package views

import (
	"fmt"

	"go.universe.tf/garden/db"
	"go.universe.tf/garden/forms"
	"go.universe.tf/garden/types/plantfamily"
	"go.universe.tf/garden/types/plantlifespan"
	"go.universe.tf/garden/types/soiltype"
	"go.universe.tf/garden/types/suntype"
	"go.universe.tf/garden/types/tribool"
)

templ SeedList(seeds []db.Seed) {
	for _, seed := range seeds {
		<li hx-get={ f("/seeds/%d", seed.ID) } hx-target="body" hx-push-url="true">
			{ seed.Name }
		</li>
	}
}

templ SeedListAutocomplete(seeds []db.Seed) {
	for _, seed := range seeds {
		<li value={s(seed.ID)}>{seed.Name}</li>
	}
}

templ Seeds(seeds []db.Seed) {
	<nav>
		<input
			size="1"
			type="search"
			name="q"
			hx-get="/seeds/search"
			hx-trigger="input changed delay:200ms, search"
			hx-target="#seeds"
		/>
		<button hx-get="/seeds/new" hx-push-url="true" hx-target="body">Add</button>
	</nav>
	<ul id="seeds">
		@SeedList(seeds)
	</ul>
}

type badgeKind string

const (
	badgeGood badgeKind = "badge good"
	badgeBad = "badge bad"
	badgeInfo = "badge info"
)

type badgeThumb int

const (
	thumbNone badgeThumb = iota
	thumbUp
	thumbDown
)

templ badge(kind badgeKind, thumb badgeThumb, label string) {
	<li class={ string(kind) }>
		switch thumb {
			case thumbUp:
				@iconThumbsUp()
			case thumbDown:
				@iconThumbsDown()
		}
		{ label }
	</li>
}

templ Seed(seed db.Seed, hist [][]db.GetSeedHistoryRow) {
	<nav>
		<button hx-get="/seeds" hx-target="body" hx-push-url="true">Back</button>
		<div class="stretch"></div>
		<button hx-get={ f("/seeds/%d/edit", seed.ID) }
				hx-target="body"
				hx-push-url="true">
			Edit
		</button>
		<button hx-get={ f("/plants/new?SeedID=%d", seed.ID) }
				hx-target="body"
				hx-push-url="true">
			Plant
		</button>
	</nav>

	<article>
		<h1>{ seed.Name }</h1>

		@seedBadges(seed)

		<dl>
			if seed.LatinName != "" {
				<dt>Latin</dt>
				<dd>{ s(seed.LatinName) }</dd>
			}
			if seed.Family != plantfamily.Unknown {
				<dt>Family</dt>
				<dd>{ s(seed.Family) }</dd>
			}
			if seed.Year != nil {
				<dt>Purchase year</dt>
				<dd>{ atoi(*seed.Year) }</dd>
			}
			if seed.Lifespan != plantlifespan.Unknown {
				<dt>Lifespan</dt>
				<dd>{ s(seed.Lifespan) }</dd>
			}
		</dl>
	</article>

	if len(hist) > 0 {
		<article>
			<h2>Previously...</h2>
			<dl>
				for i, h := range hist {
					for j, hh := range h {
						if j == 0 {
							if i > 0 {
								<div class="grid-spacer"></div>
								<div class="grid-spacer"></div>
							}
							if !hh.End.IsZero() {
								<dt>{date(hh.End.Time)}</dt>
								<dd>Uprooted</dd>
							}
						}
						<dt>{date(hh.Start.Time)}</dt>
						<dd>
							<a href={ templ.SafeURL(f("/locations/%d", hh.LocationID)) }>
								{hh.LocationName}
							</a>
						</dd>
					}
				}
			</dl>
		</article>
	}
}

templ seedBadges(seed db.Seed) {
	<ul class="badges">
		if seed.IsKeto == tribool.True {
			@badge(badgeGood, thumbNone, "keto")
		} else if seed.Edible == tribool.True {
			@badge(badgeGood, thumbNone, "edible")
			if seed.IsKeto == tribool.False {
				@badge(badgeBad, thumbDown, "keto")
			}
		}
		if seed.IsNative == tribool.True {
			@badge(badgeGood, thumbNone, "native")
		}
		if seed.IsInvasive == tribool.True {
			@badge(badgeBad, thumbNone, "invasive")
		}
		if seed.IsCoverCrop == tribool.True {
			@badge(badgeInfo, thumbNone, "cover crop")
		}
		if seed.GrowsWellFromSeed == tribool.True {
			@badge(badgeGood, thumbUp, "seed")
		} else if seed.GrowsWellFromSeed == tribool.False {
			@badge(badgeBad, thumbDown, "seed")
		}
		if seed.IsBadForCats == tribool.True {
			@badge(badgeBad, thumbDown, "cats")
		} else if seed.IsBadForCats == tribool.False {
			@badge(badgeGood, thumbUp, "cats")
		}
		if seed.IsDeerResistant == tribool.True {
			@badge(badgeInfo, thumbUp, "deer")
		}
		if seed.NeedsTrellis == tribool.True {
			@badge(badgeInfo, thumbNone, "trellis")
		}
		if seed.NeedsBirdNetting == tribool.True {
			@badge(badgeInfo, thumbNone, "bird net")
		}
		if seed.NeedsStratification == tribool.True {
			@badge(badgeInfo, thumbNone, "stratify")
		}
		switch seed.SunType {
		case suntype.Full:
			@badge(badgeInfo, thumbNone, "full sun")
		case suntype.Partial:
			@badge(badgeInfo, thumbNone, "partial sun")
		case suntype.Shade:
			@badge(badgeInfo, thumbNone, "shade")
		}
		switch seed.SoilType {
		case soiltype.Dry:
			@badge(badgeInfo, thumbNone, "dry soil")
		case soiltype.Wet:
			@badge(badgeInfo, thumbNone, "wet soil")
		case soiltype.Both:
			@badge(badgeInfo, thumbNone, "dry or wet soil")
		}
	</ul>
}

templ seedForm(form *forms.Form, cancelURL string) {
	<nav>
		<button hx-get={ cancelURL }
				hx-target="body"
				hx-push-url="true">
			Cancel
		</button>
		<div class="stretch" />
		<button form="seed-form">Save</button>
	</nav>
	<form id="seed-form" hx-post hx-target="body">
		@textInput(form.Fields["Name"], "")
		@textInput(form.Fields["LatinName"], "Latin name")
		@comboInput(form.Fields["Family"], "", "/seeds/search-family")
		@selectInput(form.Fields["Lifespan"], "")
		@selectInput(form.Fields["SunType"], "Sun exposure")
		@selectInput(form.Fields["SoilType"], "Soil wetness")
		@selectInput(form.Fields["Edible"], "Edible?")
		@selectInput(form.Fields["NeedsTrellis"], "Needs trellis?")
		@selectInput(form.Fields["NeedsBirdNetting"], "Needs bird netting?")
		@selectInput(form.Fields["NeedsStratification"], "Needs stratification?")
		@selectInput(form.Fields["IsKeto"], "Keto?")
		@selectInput(form.Fields["IsNative"], "Native?")
		@selectInput(form.Fields["IsInvasive"], "Invasive?")
		@selectInput(form.Fields["IsCoverCrop"], "Cover crop?")
		@selectInput(form.Fields["GrowsWellFromSeed"], "Grows well from seed?")
		@selectInput(form.Fields["IsBadForCats"], "Bad for cats?")
		@selectInput(form.Fields["IsDeerResistant"], "Deer resistant?")
		@formErrors(form)
	</form>
}

templ NewSeed(form *forms.Form) {
	@seedForm(form, "/seeds")
}

templ EditSeed(id int64, form *forms.Form) {
	@seedForm(form, fmt.Sprintf("/seeds/%d", id))
}
